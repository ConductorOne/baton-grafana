name: ci

on:
  pull_request:

jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run linters
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          args: --timeout=3m

  go-test:
    strategy:
      matrix:
        go-version: [1.23.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: go tests
        run: (set -o pipefail && go test -v -covermode=count -json ./... | tee test.json)

      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json

  test:
    runs-on: ubuntu-latest
    # 1) Spin up a Grafana container as a service
    services:
      grafana:
        image: grafana/grafana:latest
        ports:
          - 3000:3000
        env:
          GF_SECURITY_ADMIN_USER: admin
          GF_SECURITY_ADMIN_PASSWORD: admin
        options: >-
          --health-cmd="curl --fail http://localhost:3000/api/health || exit 1"
          --health-interval=5s
          --health-retries=10

    # 2) Environment variables
    env:
      BATON_LOG_LEVEL: debug
      # The following represent your test data for baton grants
      CONNECTOR_ENTITLEMENT: "org:1:Admin"
      CONNECTOR_PRINCIPAL: "1"
      CONNECTOR_PRINCIPAL_TYPE: "user"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x

      # (Optional) Wait for Grafana explicitly:
      - name: Wait for Grafana
        run: |
          echo "Waiting for Grafana to become healthy..."
          for i in {1..6}; do
            if curl -s http://localhost:3000/api/health | grep '"database":true' > /dev/null; then
              echo "Grafana is ready!"
              break
            fi
            sleep 5
          done

      - name: Build baton-grafana
        run: go build -o baton-grafana ./cmd/baton-grafana

      # Run baton-grafana with admin credentials from the Grafana container
      - name: Run baton-grafana
        run: ./baton-grafana --username=admin --password=admin --file=sync.c1z

      - name: Install baton
        run: |
          ./scripts/get-baton.sh
          sudo mv baton /usr/local/bin

      - name: Check for grant before revoking
        run: |
          baton grants \
            --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" \
            --output-format=json \
          | jq --exit-status \
            ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""